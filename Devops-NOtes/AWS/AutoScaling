# What is Auto Scaling
We have two types of auto scaling
1) Horizontal Auto scaling  -> Horizontial Scalling increase the number of instances
2) vertical Auto scaling  -> Vertical Scalling increase the capacity of system (like CPU capacity)

Note: We need to ELB to create target groups.

Horizontal scaling Divied into three types
1) Dynamic scalling
2) Scheduled scalling
3) Predictive scalling

# What is Dynamic scalling
-> It will work based on CPU theshold
-> If load overcome 80% on cpu then it will create another instance

# What is Scheduled scalling
-> It will the schedule the instance when instances will launch
ex:
in business hrs(9 to 5pm) -- 5 instances
(5pm to 9am)--> 2 instance

# What is Predictive scalling
-> It will apprised wheather add the server or remove server
aws machine learing algorithms automatically identifies when to scale in and scale out

# How to create Autoscaling
-> After create ELB
-> Fisrt you will create AMI image to which instance do you want to do autoscaling
-> Click on instance, Go to actions, click image and template, click create image 
-> give image name
-> enable Noreboot
-> Clikc Tag image and snapshots together
-> create image 
-> After create the AMI image. you will go auto scalling and click create auto scalling
-> Give name
-> create launch template
-> give template name
-> Click Auto Scaling guidance
-> Click My AMIS and choose ami image
-> choose instance type
-> choose key pair
-> choose security group whichever you have given in ELB
-> launch the template
-> Come to auto scaling and choose that templete 
-> Next
-> choose VPC Whichever VPC you have used in ELB
-> Select all subnets
-> Next
-> click Attach to an existing load balancer
-> Click Choose from your load balancer target groups
-> Choose target group
-> Click Turn on Elastic Load Balancing health checks
-> Next
-> choose you desired instances
-> Click Target tracking scaling policy
-> Next
-> Next
-> Next
-> Create

-> After create the auto scaling. you will go target group and check the health status
-> After you will go Ec2 instances and click that new instance and copy the IP and paste IP in browser
-> If you terminated the instance then you will get the new instance

Note: Auto scaling wont apply the target group instances 
=============================================================================================================================================
when new server got created then how our website content shared

1.launch ec2 install software and code
2.create AMI for ec2 (OS+application code) complete backup AMI will take
while configuring autoscaling(2 steps)
1. launch configuration --> which AMI to use 
 		        what is the instance type of that AMI while scaling
2. AutoScaling group
               i. mention launch configuration name
	       ii. conditions--->1. min and 2.max Instances
                                 3. desired instance--> after creating ASG how many you want 
              
               iii.based on what condition scalein scale out
                    CPU -- 0-100 graterthan 70% then launch another or avg of instances
                   avg cpu less than 40 then remove 3rd server 
     
whatever data we have in AMI we have that copy in each server

3. create load balancer and add autoscaling group in target


https://youtu.be/FZPTL_kNvXc?si=wnI8E-zMUt4NdkX0
==========================================================================================================================
Auto scaling-->
without ELB autoscaling dont work

ex our website hosted in 1 ec2 for 100 users expected
server--> elasticip --> mapped to domain rakesh.com
2nd month--> 200 users --> incread to 4 core cpu 8gb RAM
3nd month--> 300 users --> incread to 8 core cpu 16gb RAM
4th month--> 150 users
to solve this we came up with autoscaling
based on cpu utilization asking    
==================================================================================================================================

have two types of auto scaling
1) Horizontal Auto scaling  -> Horizontial Scalling increase the number of instances  with same configuration
ex serv1 2core cpu
   serv2 2core cpu
   serv3 2core cpu               
2) vertical Auto scaling  -> Vertical Scalling increase the capacity of system (like CPU capacity)    
ex
serv1--> 2core remove
serv2--> 4 core cpu 8  remove 
serv3--> 8 core cpu 16 gb RAM     

ADV
no downtime in Horizontal Auto scaling 
downtime in vertical Auto scaling

AWS ONLY PROVIDE Horizontal Auto scaling -->cloud provoder    

ELB benefits
1. equally distributes load
2. it can scale to any capacity
3. health check every one min it will ping

when new server got created then how our website content shared


PROJECT

https://youtu.be/FZPTL_kNvXc?si=wnI8E-zMUt4NdkX0
**Project Overview**
- **Objective**: Implement a real-time production-grade AWS project using concepts learned from previous lessons, including EC2 instances, VPC, subnets, security groups, and load balancers .

**Architecture**
- **VPC Creation**: The project demonstrates how to create a Virtual Private Cloud (VPC) to secure applications in a production environment. The architecture includes:
  - **Public Subnet**: Contains the load balancer and NAT Gateway.
  - **Private Subnet**: Hosts the applications .
  
- **Traffic Flow**: Users access the application through the internet gateway to the load balancer, which then routes traffic to the applications in the private subnet .

**Key Components**
1. **Availability Zones**: The project uses two availability zones to ensure high availability. If one zone goes down, the other continues to serve traffic .
   
2. **NAT Gateway**: Masks the IP address of the applications when accessing the internet, enhancing security .

3. **Auto Scaling Group**: Automatically adjusts the number of EC2 instances based on incoming traffic. For example, if traffic increases, the group can scale from 2 to 4 instances .

4. **Load Balancer**: Distributes incoming traffic across multiple servers to ensure no single server is overwhelmed. It can also perform path-based and host-based routing .

5. **Bastion Host**: A secure server that allows SSH access to the private subnet instances without exposing them directly to the internet .

**Implementation Steps**
- **Creating the VPC**: Use the AWS console to create a VPC with public and private subnets across two availability zones. Ensure the public subnet is attached to an internet gateway for external access .

- **Setting Up Auto Scaling Group**: Configure the group to launch instances in the private subnet, ensuring they can scale based on traffic demands .

- **Configuring Security Groups**: Define inbound rules for the EC2 instances, allowing SSH access and application-specific ports .

- **Deploying Applications**: Launch applications within the auto scaling group, ensuring they can handle varying loads effectively .

**Conclusion**
This project integrates various AWS services to create a secure, scalable architecture suitable for production environments, ensuring high availability and efficient resource management.


**Auto Scaling and EC2 Instances**
- **Auto Scaling Group Creation**: An auto scaling group is created with a desired capacity of 2, which results in the creation of two EC2 instances in different availability zones: Us East 1A and Us East 1B , , .

**Bastion Host Setup**
- **Purpose of Bastion Host**: A Bastion host acts as a secure gateway between the private subnet and external access, allowing SSH access to instances without public IP addresses .
- **Creating the Bastion Host**: Launch an instance named Bastion host using Ubuntu, ensuring it is in the same VPC as the private instances and has SSH access , .

**SSH Access and Key Management**
- **Key Pair Management**: The Bastion host must have the necessary key pair to access the private instances. Use SCP (Secure Copy Protocol) to copy the key file from your personal laptop to the Bastion host , .

**Application Deployment**
- **Installing Applications**: After accessing the private instance via the Bastion host, install a simple Python application and create an HTML page to demonstrate the application , .

**Load Balancer Configuration**
- **Creating the Load Balancer**: Set up an application load balancer in a public subnet that can route traffic to the EC2 instances. The load balancer should be configured with a target group that includes both instances , .
- **Health Checks**: The target group performs health checks on the instances, ensuring that traffic is only routed to healthy instances .

**Testing and Demonstration**
- **Accessing the Load Balancer**: Once the load balancer is active, test access from the internet. If configured correctly, it should respond with the application hosted on one of the instances , .
- **Load Balancing Behavior**: When both instances are healthy, requests to the load balancer should alternate between the two applications deployed on the instances, demonstrating the load balancing functionality .
