https://mithuntechnologies-devops.blogspot.com/

# What is linux
-> Linux is open source operating system it is reliable and secure than other. It is developed by linus torvalds.
-> It was launched at sep 17 1991.

Linux is an process oriented operating system since in background and foreground  some process will be running

windows:
C:/: operating system install ===>> Admin user.
GUI mode operations (Graphical user interface) ===>> clicks.
files and folders
NTFS filesystem (new technology file system)
Linux:
/ ==>>> root ===>>> operating system install ===>>> rootuser/parent user / super user / Admin user.
CLI mode operations (Command Line interface) ===>>> commands to type.
files and directories
ext2 ext3 ext4 (latest) ==>> file systems ---- BECAUSE OF THIS WE ARE ABLE TO RUN CLI COMMANDS
ext2 ===>> second extended file system.
ext3 ===>> third extended file system.
ext4 ===>> fourth extended file system.


# What is operating system 
-> It is established communication between software and hardware.

# What is the difference between Linux and windows
# Linux
-> you will installed linux with free license
-> In linux we have so many distributors. you can choose whichever you want
-> It is more secure than windows because viruses cant easily break the kernal

# Windows
-> You should purchase the license to install windows
-> Not many customization options available
-> We need powerful antiviruses software to overcome the viruses problems

# Why we are use linux
-> It is open source os
-> It is secure
-> Free download anywhere
-> low cost

# Where we can use linux
-> Mostly we used in portable devices (Audio system and navigation)
-> Car wipers
-> Artifical intellegence
-> Machine learing

# How linux will functioning
-> user
-> shell
-> kernel
-> hardware

When anyuser enter the command using keyboard it will interact with shell. shell will detected the wheather command is valid
or not if it is valid it will interact with kernal. kernal will translate into binary language then hard will understand the binary language
after understand the binary language it will return back the result to shell. shell will display the result.

-> Shell:- Shell is interputed command, interface between user and kernal, Shell is the way to interact with operating system.
-> kernal:- It translate into binary language, interface between shell and hardware
-> Hardware: it will understand the binary language

# Types of shell
-> sh    -> shell
-> bash -> Born again shell
-> csh  -> C-shell
-> ksh  -> korn-shell

-> cat /etc/shells  -> To see the types of shells

# What is shell scripting
-> Shell is executable file it containg mulitple commands that are executed sequently.

# Linux Basic comamdns
-> date  --> To show the date
-> date +%T  --> It give only time
-> date +%D  --> It give only date
-> date +%B  --> It give only month
-> date +%Y  --> It give only year
-> date --help
-> timedatectl  --> To see details of time
-> sudo date -s "2023-09-30 10:18:20"   --> To set the particular time
-> ll  --> It show the all files
-> touch manoj --> Cretae the file
-> touch -d "2023-09-29 10:10:10" manoj  --> To change date and time of file
-> ls  --> To see the list of files
-> cd ~  --> Change the directory
-> ls -al  --> To show the hidden files
-> ls -i   --> To show the inode numbers of files
-> ls -ail
-> ls -al [Fm]*   --> It will open the all the files forth having f m
-> ls -al [!Fm]*  --> It will not give forth f and m files
-> ls -l f*  --> It open all forth f files
-> ls -al ?? --> It give one only two letters files
-> touch filename  --> To create the file
-> touch .filename  --> To create the hidden file
-> echo "writesomething" > filename --> To create the file
-> echo "writesomthing" >> filename  --> To add something to existing file
-> cat filename  --> To see the data in file
-> cat > filename   [ctrl d] --> To create the file
-> cat >> filename  --> To add something to existing file
-> cp filename destinationname  --> To copy the files from one place to another place
-> cp -R dirname destinationname  --> To copy the dir from one place to another place
-> mv oldname newname  --> To change the file name (or) To move the files from one place to another place
-> mkdir dirname  --> To create the dir

#find /-perm 600 It will displays the flies and directories which have the 600 permissions.-perm option is used to find files based upon permissions.
#find . -name Java" xargs grep "FTPReadXML": It will displays java files which have the FTPReadXML word in those files.
#find . -name java" -exec chmod 700; It will set the access permissions (700) for all java files. The argument ( inserts each found file into the chmod command line. The argument indicates the exec command line has ended.
#find . size+1000c -exec ls -l {} \; It will display the flies which size greater than 1000bytes
#find logemmin 30-exec im - will remove the logs which are created more than 30 minutes back in logs directory.
#find names awk '{print $7$11 sot -rn | head-n-10: Find ten largest files in the current directory and recursion through all subdirectories
-> find / -name filename    --> To search files
-> find / -inum enterinode number  --> To search files based on inode number
-> find / -type l   --> To search file based on type ex link(l) block(b) character(c) normal(-)
-> find / -user username    --> Seach the files based on user
-> find / -size 10k   --> search the files based on size
-> find / -size -10k  --> search the files based on below 10k size files
-> find / -size +10k  --> search the files based on above 10k size files
-> rm filename  --> To delete the file
-> rmdir dirname  --> To delete the dirname
-> rm -rf dirname  --> To delete the dir forcefully
-> rm -rf * --> To delete all the data
-> su -   --> To login into the root user
-> sudo su -  --> To login into the root user
-> sudo su username  --> To enter into the particular user without asking password
-> su username  --> To enter into the particular user
-> vi /etc/ssh/sshd_config  --> To enable authentication option and change the ssh port number

# To open the files
-> head (To see the first 10 lines)
-> tail (To see the last 10 lines)
-> less (To see the line by line)
-> more (To see page by page)
-> cat (To create and open the file)
-> vi (To create and edit the file)

# Filter commands
-> head (To display the top n lines)
   head -n filename
   head -10 filename
-> tail (To display the last n lines) 
    tail -n filename
    tail -10 filename
-> pipe(To execute the two commands at a time)
-> grep -> global regular expression point
   ls -l | grep filename
   ls -l | grep ^b  -> cap will consider the first letter of the file
   ls -l | grep t$  -> dollar will consider the last letter of the file
-> more(To see page by page)
   more filename
-> less(To see line by line)
   less filename

# File types
-> - (normal files)
-> d (directory files)
-> c (Charactor files)
-> b (Block files)
-> l (Link files)
-> s (symbolic file)

# What is the difference between Hard link and softlink
# HardLink
-> ln existingfile newfile [To creating the file]
-> Hard link having same inode numbers
-> Data will available after the remove the orginal file
-> It is not allowed for directory
-> comparitively faster 

# Softlink
-> ln -s existingfile newfile [To creating the file]
-> Soft link having different inode numbers
-> Data will not available after the remove the orginal file
-> It is allowed for directory
-> comparitively slow

# You will have another command to find the files
sudo yum install mlocate
after install you have to update your data base so that you have to execute below command to update database
sudo updatedb  --> To update database
locate filename  --> To find files
which echo  -->  It give the path of the command
# we have to use below command before use whatis
sudo mandb  --> To update database
whatis ls --> To see that command properties

# What is vim
-> vim stands for improved version of vi text editor
# vim modes
-> command mode ( When we open the vi editor it will be command mode)
-> insert mode  (When we press the i it will goes to the insert mode)
-> visual mode  (After esc the insert mode it will be visual mode)

# command mode
-> A -> It will place the cursor end of the sentence
-> I -> It will place the cursor staring of the sentence
-> o -> It will get the space below the sentences
-> O -> It will get the space above sentences
-> a -> It will shift the cursor from one letter to another letter
-> gg -> It will place the cursor staring of the line
-> G -> It will place the cursor end of the line
-> w -> It will shift the cursor word by word inforword direction
-> U -> It will remove the entire line
-> yy -> Copy the line but be cursor before the line

# Insert mode
-> i  -> Insert 

# Command line mode
-> wq  -> save and quit
-> q -> quit without save
-> / -> To search the words
-> :s/hello/hi  -> To replace the word
-> :%s/hello/hi  -> To replace the all the words
-> : se nu  -> It giving the serial numbers
-> :4 -> it will place the cursor at 4th place
-> :X -> To set the password to the file
-> :X enter, enter -> To remove the passoword to the file

# Visual mode
-> To see the data


# User Management
-> We have three type of user in linux
-> root user -> It default start from 0
-> System user -> It default start from 1 to 999
-> Normal user -> It start from 1000 to 60000

# What are the properties in user
1) username  2) password 3) UID 4) GID 5) comments  6) directory 7) shell
UID -> it having only one user (user ID)
GI -> It having collection people (group ID)
-> root and system user it will come defaultly like above format
-> normal user
1) manoj  2) password  3) 1000-60000 4) 1000-60000 5) somewriting 6) /home 7) bin/bash

-> sudo useradd username   --> To create username
-> sudo passwd username    --> To create passwd to username
-> sudo userdel username   --> To delete the username
-> sudo passwd -d username --> To delete the passwd to user
-> sudo passwd -S username --> To see passwd status to user
-> sudo usermod -l newuser olduser  --> To change the username
-> sudo usermod -u idnumber username  --> To change the userid number
-> sudo usermod -L username --> To lock the user
-> sudo usermod -U username --> To unlock the user
-> cat /etc/passwd  --> To see the user
-> sudo cat /etc/shadow  -->  To see passwds to the users
-> sudo chage -l username  --> It give the all data of passwd about user
-> sudo chage username   --> To change the existing passwd details.
-> sudo groupadd groupname --> To create the group
-> sudo gpasswd groupname  --> To create passwd to the group
-> sudo groupdel groupname  --> To delete group
-> sudo gpasswd -r groupname --> To delete passwd to group
-> sudo groupmod -n newname oldname --> To change the group name
-> sudo groupmod -g groudidnum groupname  --> To change the groupid
-> sudo useradd -G groupname username    --> To add new user to the group
-> sudo usermod -G groupname username   --> To add user to the group
-> sudo gpasswd -d username groupname    -->  To delete user from group
-> cat /etc/group  --> To see the groups
-> sudo cat /etc/gshadow  --> To see the group passwd

# We have two types of groups 
-> primary group
-> secondary group

-> Primary group: Primary group will add automatically when we create the user                
-> Secondary group: Secondary group will not add automatically when we create the user. We should create seperately
-> we can assign 16 groups to user in linux. ptimary group would be within 16 groups. we can assign 15 groups to the user

# Permissions to the files and directories
-> sudo chmod 775 filename  --> To give permission to the files
read permission=4
write permission=2
execute permission=1
no permission=0
-> sudo chown username filename  --> To add user to the file
-> sudo chgrp groupname filename  --> To add group to the file 
-> sudo chown -R username filename  --> To add user to the directory
-> sudo chgrp -R groupname filename  --> To add group to the directory
-> sudo chmod u+s filename  --> To set the setuid permission to the file [Everyone will see the file]
-> sudo chmod u-s filename  --> To remove setuid permission to the file
-> sudo chmod g+s filename  --> To set the setgid permission to the file[only peoples who woule be in group they can only see]
-> sudo chmod g-s filename  --> To remove the setgid permission to the file
-> sudo chmod o+t filename  --> To set the sticky bit permission to the file[only file user can see]
-> sudo chmof o-t filename  --> To remove the stcky bit permission to the file

file having 666 permission and directory having 777 permission 
FOR DETERMINING THE FILE PERMISSIONS FOR NEWLY CREATED FILES---> command: umask
umask value is 022  (umask 022 it will come defaultly)
defaulty file will come 644 permission and directory will come 755 permission to add mask value

# umask temporary change
umask newvalue
umask 023

# umask permanent change
vi /etc/bashrc

# To assign ACL permission to the files and directory
-> setfacl filename   -> To assign ACL permission
-> getfacl filename   -> To check the ACL permission
-> setfacl -m u:username:rwx filename  -> To set user and permission to the file
-> setfacl -m g:groupname:rwx filename  -> To set group and permission to the file
-> setfacl -m o::rwx filename  -> To set other and permission to the file
-> setfacl -m u:username:rwx,g:groupname:rwx,o::rwx filename  -> To set user,group and other permission to file at a time
-> setfacl -Rm u:username:rwx directoryname  -> To set user and permission to the file
-> setfacl -Rm g:groupname:rwx directoryname  -> To set group and permission to the file
-> setfacl -x u:username:rwx filename  -> To delete the user acl permission to file
-> setfacl -x g:groupname:rwx filename  -> To delete the group acl permission to file
-> setfacl -b filename  -> To remove the all permission

# Booting Process
-> Bios
-> MBR
-> Grab
-> Kernal
-> init
-> Run levels

-> When we power on the system that all the devices is called Bios post process
-> Then we called Bios. Bios stands for Basic input output system here choose "Root disk"
-> Then we called MBR. MBR stands for master boot record it is located to "first sector on disk"
-> Then we called Grab. Grab stands for ground unified boot it is located to /boot/grab/grab.conf
-> Then we called kernal. kernal loads the all kernal modules on kernel will execute the init process
-> init process goes to the /etc/initlab  [To change the init process to permentaly vi /etc/initlab]
-> Here choose the runlevels based on Runlevels

# Runlevels
-> How to check the run level
 who -R [To check the run level]
-> Total run levels '6'
1) init 0 -> Shutdown
2) init 1 -> single user
3) init 2 -> mulituser without NFS
4) init 3 -> mulituser with NFS and CLI
5) init 4 -> reserved
6) init 5 -> mulituser with NFS and GUI
7) init 6 -> reboot 

# uname
-> uname -s -> To see all kernal name
-> uname -n -> To see host name
-> uname -r -> To see the kernal version
-> uname -v -> To see released date
-> uname -m -> To see the mission code
-> uname -p -> To see the processer code
-> uname -o -> To see the operating system
-> uname -n -> To see the hostaname


Top Linux commands that are commonly used in DevOps: ♾

1. ls: List directory contents
2. cd: Change directory
3. pwd: Print working directory
4. mkdir: Create a directory
5. touch: Create a file
6. cp: Copy files and directories
7. mv: Move or rename files and directories
8. rm: Remove files and directories
9. find: Search for files and directories
10. grep: Search for patterns in files
11. cat: Concatenate and display files
12. less: View file contents page by page
13.head: Display the first lines of a file
14. tail: Display the last lines of a file
15. vi/vim: Text editor
16. nano: Text editor
17. tar: Archive and compress files
18. gzip: Compress files
19. gunzip: Decompress files
20. wget: Download files from the web
21. curl: Transfer data to or from a server
22. ssh: Secure shell remote login
23. scp: Securely copy files between hosts
24. chmod: Change file permissions
25. chown: Change file ownership
26. chgrp: Change group ownership
27. ps: Display running processes
28. top: Monitor system resources and processes
29. kill: Terminate processes
30. df: Display disk space usage
31. du: Estimate file and directory space usage
32. free: Display memory usage
33. uname: Print system information
34. ifconfig: Configure network interfaces
35. ping: Test network connectivity
36. netstat: Network statistics
37. iptables: Firewall administration
38. systemctl: Manage system services
39. journalctl: Query the system journal
40. crontab: Schedule cron jobs


===============================================================================================================================

FILESYSTEM HIERARCHY SYSTEM

Linux uses single rooted, inverted tree like file system hierarchy
/ This is top level directory

It is parent directory for all other directories
It is called as ROOT directory
It is represented by forward slash (/)
C:\ of windows

/root it is home directory for root user (super user)
It provides working environment for root user
C:\Documents and Settings\Administrator
/home it is home directory for other users
It provide working environment for other users (other than root)
c:\Documents and Settings\username
/boot it contains bootable files for Linux
Like vmlinuz (kernel)..... ntoskrnl
Initrd (INITial Ram Disk)and
GRUB (GRand Unified Boot loader).... boot.ini, ntldr

/etc it contains all configuration files
Like /etc/passwd..... User info
/etc/resolv.conf... Preferred DNS
/etc/dhcpd.conf.... DHCP server
C:\windows\system32\dirvers\

/usr by default soft wares are installed in /usr directory

(UNIX Sharable Resources)
c:\program files

/opt It is optional directory for /usr
It contains third party softwares
c:\program files

/bin it contains commands used by all users

(Binary files)

/sbin it contains commands used by only Super User (root)

(Super user's binary files)

Page 15 of 274

www.kerrneltech.com

/dev it contains device files

Like /dev/hda ... for hard disk
/dev/cd rom ... for cd rom
Similar to device manager of windows

/proc it contain process files

Its contents are not permanent, they keep changing
It is also called as Virtual Directory
Its file contain useful information used by OS
like /proc/meminfo ... information of RAM/SWAP
/proc/cpuinfo ... information of CPU
/var it is containing variable data like mails, log files
/mnt it is default mount point for any partition

It is empty by default

/media it contains all of removable media like CD-ROM, pen drive
/lib it contains library files which are used by OS

It is similar to dll files of windows
Library files in Linux are SO (shared object) files



Here are examples of how to configure ACLs in Linux for files and directories:

1. Viewing Existing ACLs
To see the current ACLs of a file or directory:

bash
Copy code
getfacl <filename>
Example:

bash
Copy code
getfacl myfile.txt
Output:

arduino
Copy code
# file: myfile.txt
# owner: user1
# group: group1
user::rw-
group::r--
other::r--
2. Setting an ACL
To grant specific permissions to a user or group, use the setfacl command.

Grant Read and Write Access to a User
bash
Copy code
setfacl -m u:username:rw <filename>
Example:

bash
Copy code
setfacl -m u:john:rw myfile.txt
Grant Execute Permission to a Group
bash
Copy code
setfacl -m g:groupname:x <filename>
Example:

bash
Copy code
setfacl -m g:devteam:x myfile.txt
3. Setting Default ACLs
Default ACLs automatically apply to new files and directories created within a directory.

Set Default ACL for a Directory
bash
Copy code
setfacl -m d:u:username:rw <directory>
Example:

bash
Copy code
setfacl -m d:u:john:rw /shared_directory
4. Removing an ACL
To remove a specific ACL entry:

bash
Copy code
setfacl -x u:username <filename>
Example:

bash
Copy code
setfacl -x u:john myfile.txt
To remove all ACLs from a file:

bash
Copy code
setfacl -b <filename>
Example:

bash
Copy code
setfacl -b myfile.txt
5. Example Scenario
Requirement:

A file named project.txt should:
Allow the owner full access (rw-).
Allow a user named alice read-only access (r--).
Allow a group named devs read and write access (rw-).
Restrict all others (---).
Commands:

bash
Copy code
# Set permissions for the owner
chmod 600 project.txt

# Add read-only access for alice
setfacl -m u:alice:r project.txt

# Add read-write access for the devs group
setfacl -m g:devs:rw project.txt

# Verify the ACL
getfacl project.txt
Output:

makefile
Copy code
# file: project.txt
# owner: user1
# group: group1
user::rw-
user:alice:r--
group::---
group:devs:rw-
mask::rw-
other::---

   
