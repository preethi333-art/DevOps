 What is presistence volumes---> cluster level
-> A PersistentVolume is a piece of storage in the Kubernetes cluster that has been provisioned by an administrator.

# What is presistence volumes claim  ---> namespace level in same namespace where yu use you should create
-> A PersistentVolumeClaim is a request for storage(volume) by a user(not end user) or developer or devops Engineer .Using PVC we can request how much storage
you need and with what access mode you need 
-> It is a resource object in the Kubernetes API that allows a Pod to access a piece of storage from a PersistentVolume (PV).

HOw pV and PVC associated?
because of accessMode and volumes


-> In persistence volume claim we have different access modes
 1) RWO -> Read write once for single node
 2) ROX -> Read only access for multiple nodes
 3) RWX -> Read write access for mulitple nodes

-> In persistence volume claim we have different policies
 1) Retain -> If we delete pvc associated PV volume will retain data will be there, not available for new PVC
 2) Delete -> If we delete pvc associated PV volume will delete
 3) Recycle -> Recycle policy is deprecated no longer recommanded for use


Kubernetes Volumes
A Container's file system lives only as long as the Container does. So when a Container terminates and restarts, filesystem
changes are lost. Volumes in Kubernetes are very easy to manage. It is basically a directory that gets mounted to a pod. 
After telling the container to use Volumes for storing evergreen information, you can safely modify the pods without ever losing your data.
Kubernetes supports many types of volumes, and a Pod can use any number of them simultaneously. 
For more consistent storage that is independent of the Container, we can use a Volume.
This is especially important for stateful applications, such as databases.
To use a volume, a Pod specifies what volumes to provide for the Pod (the spec. volumes field) and where to mount those 
into Containers (the spec.containers.volume Mounts field) as shown.
Kubernetes supports several types of Volumes:
awsElasticBlockStore
azure Disk
azureFile
configMap
emptyDir
gcePersistentDisk
gitRepo (deprecated]
hostPath
persistentVolumeClaim
secret


Persistent Volumes are simply a piece of storage in your cluster. Similar to how you have a disk resource in a server,
a persistent volume provides storage resources for objects in the cluster. At the most simple terms 
you can think of a PV as a disk drive. It should be noted that this storage resource exists independently from any pods 
that may consume it. Meaning, that if the pod dies, the storage should remain intact assuming the claim policies are correct. Persistent Volumes are provisioned in two ways, Statically or Dynamically.
Static Volumes -A static PV simply means that some k8s administrator provisioned a persistent volume in the cluster 
and it's ready to be consumed by other resources.
Dynamic Volumes - In some circumstances a pod could require a persistent volume that doesn't exist. In those cases
it is possible to have k8s provision the volume as needed if storage classes were configured to demonstrate
where the dynamic PVs should be built. This post will focus on static volumes for now.
Persistent Volume Claims
Pods that need access to persistent storage, obtain that access through the use of a Persistent Volume Claim.
A PVC, binds a persistent volume to a pod that requested it.
When a pod wants access to a persistent disk, it will request access to the claim which will specify the size, 
access mode and/or storage classes that it will need from a Persistent Volume. Indirectly the pods get access to the PV,
but only through the use of a PVC.
Claim Policies
We also reference claim policies earlier. A Persistent Volume can have several different claim policies associated with it
including:
Retain - When the PVC is deleted, the PV still exists and the volume is considered "released". But it is not yet available for
another claim because the previous claimant's data remains on the volume. An administrator we can manually reclaim the volume.
Recycle-When the claim is deleted the volume remains but performs a basic scrub(delete data from storage) (rm -rf/volume/*) 
on the volume and makes it available again for a new claim.
Delete - When the claim is deleted, it removes both the Persistent Volume object from Kubernetes, as well as the associated 
storage. The claim policy (associated at the PV and not the PVC) is responsible for what happens to the data on 
when the claim has been deleted
