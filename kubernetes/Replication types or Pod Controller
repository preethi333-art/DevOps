kubectl explain rc
kubectl explain rc --recursive // to see in more detail

how to know pod is under controller
kubectl describe <pod name>

kubectl delete rc <rc-name>

when we run by default we get some random label 
to delete label
ex:
kubectl label pod <pod-name> run-
assign new label: kubectl label pod <pod-name> team=dev

*** 
IF YOU WANT ONE POD NOT TO BE MANAGED BY REPLICATION CONTROLLER you can simply unset the lable or change the lable 
Now RC try to create new pod inorser to maintain desired state
*** by default if you remove rplication controller it will remove rplication controller along with pods
but you want to remove only replication controller but not pods then
kubectl delete rc --cascade=false <rc-name>


HOW ROLLING UPGRADE HAPPENS IN CASE OF REPLICATION CONtROLLER
===============================================================

V1.18 --> kubernetes has removed the rolling update feature in ReplicationController
change in yml the upgraded version and run below command 
kubetcl rolling-update rc-demo --update-period=10s -f rc.yaml // this rolling-update command removed

now controller will get created one by one each pod will get deleted in old RC 
once all new pods got created in new RC, the connection re-established again to new RC with some down time
this is the disadvantage in RC CONTROLLER 

refer Screenshot 2024-11-12 160218.png
=========================================
Today actually i tried this RC file. First i increased the replica to 4, as usual a new pods created.
I reconfigured again to 3, now wat happened was... the last pod which has the low time age was first to be terminated ( This is what i observed) Later i decreased  the replica further to 2, again the  the one which has the low time terminated...






